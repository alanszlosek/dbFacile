2012-04-28

Intresting, SQLite returns a very helpful error if insert would cause key uniqueness violation:
	SQLite3::query(): Unable to execute statement: column name is not unique

2009-01-26

Rolled a simpler (non-OOP) version of dbFacile for use at Qgiv. I'd like to include that work in the actual dbFacile package.

2008-09-24

I think I've decided to disable invalid field checking by default. It used to be that you could pass invalid fields in the data array to insert/update and they'd only use the fields that are present in the table to construct the insert/update query. While this is nice and convenient, it enables sloppy programming, which I'm not particularly happy with. But I should probably get the concensus of others before doing anything drastic.

Also, rather than having to modify the key in data and parameter arrays in order to tell prepareData NOT to escape the data before insertion into the query, I've come up with a different method: wrap the value in an array. Example:

$rows = $db->fetchAll('select * from users where id>:id', array('id' => array(5)));

Notice above that the 2nd parameter of fetchAll is a parameter array that contains the named parameter "id". The value of the "id" element is an array containing a single value of 5. When the internals of dbFacile see that the value is an array, it won't be escaped or quoted. It'll be inserted into the query exactly as it is.

2008-05-02

Since PDO doesn't really return the number of affected rows for update and probably delete queries. What should I do? If the query fails, does it at least return false, and some non-false value to indicate the query string itself is valid?

2008-05-01

The problem with caching queries at the dbFacile level is this:

1. select all rows in the table
2. insert into the table
3. select all rows in the same table and you'll get the same as #1, neglecting the insert

Maybe you should only cache the previous query? And only if it's not an insert, update or delete? That'll probably fix it.

2008-04-16

Need to solidify when dbFacile loads the schema. ORMer references this schema right away at each instantiation of an orm object...

2008-03-31

Pulling foreign keys: http://dev.mysql.com/doc/refman/5.1/en/information-schema.html

cache schema in dbFacile instance or statically? waht about multi db connections?

2008-03-05

Probably best to cache full schema info in orm

2008-02-29

It's seldom, but there is still the need for a database abstraction layer such as dbFacile to be usable for more that one database connection. And since everyone's afraid of globals, I have an idea. It's not revolutionary:

* Create a static class variable
* Call it "instance" or something
* Each time a database is opened via "dbFacile::open(..)", save the instace that's created in dbFacile::instance[DATABASENAME].

There would be clashes, however, if the database name is the same across both connections ... hmm.

2008-02-06

I want to encapsulate my implementation of the PDO placeholder transformation logic. That way, since we're going to default to trying to use PDO, it can be overridden or simply not used.

I also want to ONLY replace the placeholders with actual escaped, quoted data in the call to execute. It will take two parameters: the query string and a parameters array.

Make dbFacile->execute() return false if error, else number of affected rows?

dbFacile::$tryPdo = true/false; for whether to try to use PDO over the native functions.

The result returned from a fetch is basically a result set. It should have seek(), count(), and other methods.

The main execute() method would pass the query and parameters off to _query(), which knows whether the query and params need to be combined into a final string or can be used as-is (in the case of PDO). So we need another method for makeQuery().
